/**
 * This work is licensed under the Creative Commons Attribution-Share Alike 3.0
 * United States License. To view a copy of this license,
 * visit http://creativecommons.org/licenses/by-sa/3.0/us/ or send a letter
 * to Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.
 *
 * Modified by: Jill Elaine
 * Email: jillelaine01@gmail.com
 *
 * Configurable idle (no activity) timer and logout redirect for jQuery.
 * Works across multiple windows and tabs from the same domain.
 *
 * Dependencies: JQuery v1.7+, JQuery UI, store.js from https://github.com/marcuswestin/store.js - v1.3.4+
 *
 * version 1.0.10
 **/ 
 
/*global jQuery: false, document: false, store: false, clearInterval: false, setInterval: false, setTimeout: false, clearTimeout: false, window: false, alert: false*/
/*jslint indent: 2, sloppy: true, plusplus: true*/

(function ($) {

  $.fn.idleTimeout = function (userRuntimeConfig) {

    //##############################
    //## Public Configuration Variables
    //##############################
    var defaultConfig = {
      redirectUrl: '/logout',      // redirect to this url on logout. Set to "redirectUrl: false" to disable redirect

      // idle settings
      idleTimeLimit: 1200,           // 'No activity' time limit in seconds. 1200 = 20 Minutes
      idleCheckHeartbeat: 2,       // Frequency to check for idle timeouts in seconds

      // optional custom callback to perform before logout
      customCallback: false,       // set to false for no customCallback
      // customCallback:    function () {    // define optional custom js function
          // perform custom action before logout
      // },

      // configure which activity events to detect
      // http://www.quirksmode.org/dom/events/
      // https://developer.mozilla.org/en-US/docs/Web/Reference/Events
      activityEvents: 'click keypress scroll wheel mousewheel mousemove', // separate each event with a space

      // warning dialog box configuration
      enableDialog: true,           // set to false for logout without warning dialog
      dialogDisplayLimit: 180,       // Time to display the warning dialog before logout (and optional callback) in seconds. 180 = 3 Minutes
      dialogTitle: 'Session Expiration Warning', // also displays on browser title bar
      dialogText: 'For your protection, you are about to be automatically logged out of hastingsdirect.com!',
      dialogTimeRemaining: 'Time remaining',
      dialogStayLoggedInButton: 'Ok - Continue session',

      // error message if https://github.com/marcuswestin/store.js not enabled
      errorAlertMessage: 'Please disable "Private Mode", or upgrade to a modern browser. Or perhaps a dependent file missing. Please see: https://github.com/marcuswestin/store.js',

      // server-side session keep-alive timer
      sessionKeepAliveTimer: 600,   // ping the server at this interval in seconds. 600 = 10 Minutes. Set to false to disable pings
      sessionKeepAliveUrl: window.location.href // set URL to ping - does not apply if sessionKeepAliveTimer: false
    },

    //##############################
    //## Private Variables
    //##############################
      currentConfig = $.extend(defaultConfig, userRuntimeConfig), // merge default and user runtime configuration
      origTitle = document.title, // save original browser title
      activityDetector,
      startKeepSessionAlive, stopKeepSessionAlive, keepSession, keepAlivePing, // session keep alive
      idleTimer, remainingTimer, checkIdleTimeout, checkIdleTimeoutLoop, startIdleTimer, stopIdleTimer, // idle timer
      openWarningDialog, dialogTimer, dialogTimedOut, stopDialogTimer, isDialogOpen, destroyWarningDialog, countdownDisplay, // warning dialog
      logoutUser, blockTimedOutWarning;

    //##############################
    //## Public Functions
    //##############################
    // trigger a manual user logout
    // use this code snippet on your site's Logout button: $.fn.idleTimeout().logout();
    this.logout = function () {
      store.set('idleTimerBrowserSessionExpired', true);
    };

    //##############################
    //## Private Functions
    //##############################

    //----------- KEEP SESSION ALIVE FUNCTIONS --------------//
    startKeepSessionAlive = function () {

      keepSession = function () {
        $.get(currentConfig.sessionKeepAliveUrl);
        startKeepSessionAlive();
      };

      keepAlivePing = setTimeout(keepSession, (currentConfig.sessionKeepAliveTimer * 1000));
    };

    stopKeepSessionAlive = function () {
      clearTimeout(keepAlivePing);
    };

    //----------- ACTIVITY DETECTION FUNCTION --------------//
    activityDetector = function () {

      $('body').on(currentConfig.activityEvents, function () {

        if (!currentConfig.enableDialog || (currentConfig.enableDialog && isDialogOpen() !== true)) {
          startIdleTimer();
        }
      });
    };

    //----------- IDLE TIMER FUNCTIONS --------------//
    checkIdleTimeout = function () {

      var timeIdleTimeout = (store.get('browserSessionIdleTimerLastActivity') + (currentConfig.idleTimeLimit * 1000));

      if ($.now() > timeIdleTimeout) {

        if (!currentConfig.enableDialog) { // warning dialog is disabled
          logoutUser(); // immediately log out user when user is idle for idleTimeLimit
        } else if (currentConfig.enableDialog && isDialogOpen() !== true) {
          openWarningDialog();
        }
      } else if (store.get('idleTimerBrowserSessionExpired') === true) { //a 'manual' user logout?
        logoutUser();
      } else {

        if (currentConfig.enableDialog && isDialogOpen() === true && blockTimedOutWarning === false) {
          destroyWarningDialog();
          stopDialogTimer();
        }
      }
    };

	this.resetIdleTimer = function () {
		startIdleTimer();
	};
	
    startIdleTimer = function () {
      stopIdleTimer();
      store.set('browserSessionIdleTimerLastActivity', $.now());
      checkIdleTimeoutLoop();
    };

    checkIdleTimeoutLoop = function () {
      checkIdleTimeout();
      idleTimer = setTimeout(checkIdleTimeoutLoop, (currentConfig.idleCheckHeartbeat * 1000));
    };

    stopIdleTimer = function () {
      clearTimeout(idleTimer);
    };

	dismissModal = function () {
		destroyWarningDialog();
		stopDialogTimer();
		startIdleTimer();
	};
	
	redirectToURL = function () {
		//window.location.href = 'http://www.hastingsdirect.com/';
	};
	
	function browserSessionOpenModalInStack() {
		//When there's more than one modal window in stack
		var modalInStack = document.getElementsByClassName("modalWindow order");
		var openModal =  document.getElementsByClassName("modalWindow showModal");
		
		if ( modalInStack.length > 0 && openModal.length==0){
			var modalInStackId = modalInStack[0].id;
			
			modalInStack[0].className = "modalWindow showModal";	
			$("#"+modalInStackId).scrollTop($("#"+modalInStackId).data("scroll"));
			$("body").css("overflow","hidden");
			showPopupMask();
		}
	}
	
	setupModalWindow = function () {
		
		var initialTimer = currentConfig.dialogDisplayLimit;
        var min = Math.floor(initialTimer / 60); // minutes
        if (min < 10) { min = '0' + min; }
        var sec = initialTimer - (min * 60); // seconds
        if (sec < 10) { sec = '0' + sec; }
		$('#p1_BrowserTimeoutCountdown').html(min+':'+sec);
		
		if (Hi !== 'undefined') {
			Hi.addHook('postProcessResponses',browserSessionOpenModalInStack);
		}
		
		//Define event for button click so it cancels the session expiration
		$("#ContinueSessionButton").on("click", dismissModal);
		
		//Variables Init
		var hasOtherModalWindowOpen = document.getElementsByClassName("modalWindow showModal");
		var hasOtherShowModalWindows;
		var stackOrder = 0;
		var previousModalOrder;

		//Check if some modal window is already opened
		if (hasOtherModalWindowOpen.length > 0) {

			//Check if some modal window is in stack position
			hasOtherShowModalWindows = document.getElementsByClassName("modalWindow order");
			if (hasOtherShowModalWindows.length > 0) {
				
				//Check stack size
				var nOrders = hasOtherShowModalWindows.length;
				previousModalOrder = hasOtherShowModalWindows[0];
				
				//This value will be above 0
				stackOrder = parseInt(previousModalOrder.className.charAt(previousModalOrder.className.length - 1)) + 1;
			} else {
				//No modal in stack -> Existing modal window is the first on stack
				stackOrder = 1;
			}
		}
		
		//When there's no modal window being displayed
		if (stackOrder == 0) {
			$("#BrowserSessionTimeout").removeClass("displayNone");
			$("#BrowserSessionTimeout").addClass("showModal");
			$("body").css("overflow","hidden");
		} else {
			$("#"+hasOtherModalWindowOpen[0].id).data("scroll",$("#"+hasOtherModalWindowOpen[0].id).scrollTop());
			hasOtherModalWindowOpen[0].className= "modalWindow order " + stackOrder;
			$("#BrowserSessionTimeout").removeClass("displayNone");
			$("#BrowserSessionTimeout").addClass("showModal");
		}

		showPopupMask();
	};
	
    //----------- WARNING DIALOG FUNCTIONS --------------//
    openWarningDialog = function () {

	  setupModalWindow();

      countdownDisplay();
	  
      document.title = currentConfig.dialogTitle;
	  
      if (currentConfig.sessionKeepAliveTimer) {
        stopKeepSessionAlive();
      }
    };

    dialogTimedOut = function () {
		logoutUser();		
		stopDialogTimer();
		
		$("#ContinueSessionButton").addClass("displayNone");
		$("#p1_BrowserTimeoutCountdown").addClass("displayNone");
		$("#WarningHeader1").text("Your session has timed out due to inactivity.");
		$("#RedirectButton").removeAttr('onclick');
		$("#RedirectButton").on("click", redirectToURL);
		$("#RedirectButton").removeClass("displayNone");
		
		blockTimedOutWarning = true;
		
		// Code to disable browser back button when session times-out
		window.location.hash = "#nbb";		
		$(window).on("hashchange", function(e) {
			processBrowserAction(e);
		});
    };

    stopDialogTimer = function () {
      clearInterval(remainingTimer);
    };

    isDialogOpen = function () {
      var dialogOpen = $("#BrowserSessionTimeout").is(":visible");

      if (dialogOpen === true) {
        return true;
      }
      return false;
    };

    destroyWarningDialog = function () {
	  
	  $("#BrowserSessionTimeout").addClass("displayNone");
	  $("#BrowserSessionTimeout").removeClass("showModal");
	  $("body").css("overflow","auto");
	  hidePopupMask();
	  
      document.title = origTitle;

      if (currentConfig.sessionKeepAliveTimer) {
        startKeepSessionAlive();
      }
    };

    countdownDisplay = function () {
      var dialogDisplaySeconds = currentConfig.dialogDisplayLimit, mins, secs;

      remainingTimer = setInterval(function () {
        mins = Math.floor(dialogDisplaySeconds / 60); // minutes
        if (mins < 10) { mins = '0' + mins; }
        secs = dialogDisplaySeconds - (mins * 60); // seconds
        if (secs < 10) { secs = '0' + secs; }
		
		if (isNaN(mins) || isNaN(secs)) {
			$('#p1_BrowserTimeoutCountdown').html('00:00');
		} else {
			$('#p1_BrowserTimeoutCountdown').html(mins + ':' + secs);
		}

		if ((dialogDisplaySeconds == 0) || (store.get('idleTimerBrowserSessionExpired') === true)) {
			dialogTimedOut();
		}
		
        dialogDisplaySeconds -= 1;
      }, 1000);
    };

    //----------- LOGOUT USER FUNCTION --------------//
    logoutUser = function () {
      store.set('idleTimerBrowserSessionExpired', true);

      if (currentConfig.sessionKeepAliveTimer) {
        stopKeepSessionAlive();
      }

      if (currentConfig.customCallback) {
        currentConfig.customCallback();
      }

      if (currentConfig.redirectUrl) {
        window.location.href = currentConfig.redirectUrl;
      }
    };

    //###############################
    // Build & Return the instance of the item as a plugin
    // This is your construct.
    //###############################
    return this.each(function () {

      if (store.enabled) {

        store.set('browserSessionIdleTimerLastActivity', $.now());
        store.set('idleTimerBrowserSessionExpired', false);
		blockTimedOutWarning = false;

        //activityDetector();

        if (currentConfig.sessionKeepAliveTimer) {
          startKeepSessionAlive();
        }

        startIdleTimer();

      } /*else {
        alert(currentConfig.errorAlertMessage);
      }*/

    });
  };
}(jQuery));